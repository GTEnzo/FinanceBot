from config import BOT_TOKEN
from constants_and_etc import *

from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)


def calculate_period_end(period_key, from_date):
    if period_key == "–¥–µ–Ω—å":
        return from_date + timedelta(days=1)
    elif period_key == "–Ω–µ–¥–µ–ª—è":
        return from_date + timedelta(days=7)
    elif period_key == "–º–µ—Å—è—Ü":
        return from_date + timedelta(days=30)
    elif period_key == "–≥–æ–¥":
        return from_date + timedelta(days=365)
    else:
        return from_date


async def start(update: Update, context):
    user = update.effective_user
    USER_STATES[user.id] = UserState.NONE
    await update.message.reply_html(
        f'–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø FinanceBot!\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å–æ–º –∏ –ª–∏–º–∏—Ç–∞–º–∏.',
        reply_markup=markup
    )


async def profile(update: Update, context):
    user = update.effective_user
    data = USER_DATA.get(user.id, {})
    balance = data.get('balance', '–Ω–µ –∑–∞–¥–∞–Ω')
    limits = data.get('limits', {})
    spent = {category: limit_data['spent'] for category, limit_data in limits.items()}

    limit_info = "\n".join(
        [f"{category}: {limit_data['limit']} (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent[category]})" for category, limit_data in
         limits.items()]) if limits else "–Ω–µ –∑–∞–¥–∞–Ω—ã"

    await update.message.reply_html(
        f'{user.mention_html()}\n\n–ë–∞–ª–∞–Ω—Å: {balance} üí∞\n\n–õ–∏–º–∏—Ç—ã:\n{limit_info}'
    )


async def set_balance(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.SETTING_BALANCE
    await update.message.reply_text(
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )


async def set_limit(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.SETTING_LIMIT_AMOUNT
    await update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–∏–º–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–µ–¥–∞") –∏ —Å—É–º–º—É –ª–∏–º–∏—Ç–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )


async def set_general_limit(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.SETTING_GENERAL_LIMIT_AMOUNT
    await update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )


async def cancel(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.NONE
    await update.message.reply_text(
        '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=markup
    )


async def handle_text(update: Update, context):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    state = USER_STATES.get(user_id, UserState.NONE)

    if text == COMMAND_CANCEL:
        await cancel(update, context)
        return

    if state == UserState.SETTING_BALANCE:
        try:
            balance = float(text.replace(',', '.'))
            USER_DATA.setdefault(user_id, {})['balance'] = balance
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {balance:.2f} üí∞', reply_markup=markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
            )
        return

    if state == UserState.SETTING_LIMIT_AMOUNT:
        try:
            category, limit_str = text.split()
            limit = float(limit_str.replace(',', '.'))
            user_data = USER_DATA.setdefault(user_id, {})
            user_data.setdefault('limits', {})[category] = {'limit': limit, 'spent': 0.0, 'period': None,
                                                            'period_end': None}
            USER_STATES[user_id] = UserState.SETTING_LIMIT_PERIOD
            await update.message.reply_text(
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏–º–∏—Ç–∞:', reply_markup=period_markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É –ª–∏–º–∏—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "–µ–¥–∞ 100".'
            )
        return

    if state == UserState.SETTING_GENERAL_LIMIT_AMOUNT:
        try:
            limit = float(text.replace(',', '.'))
            user_data = USER_DATA.setdefault(user_id, {})
            user_data.setdefault('general_limit', {'limit': limit, 'spent': 0.0, 'period': None, 'period_end': None})
            USER_STATES[user_id] = UserState.SETTING_GENERAL_LIMIT_PERIOD
            await update.message.reply_text(
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞:', reply_markup=period_markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "100".'
            )
        return

    if state == UserState.SETTING_LIMIT_PERIOD:
        period = text.lower()
        if period in LIMIT_PERIODS:
            user_data = USER_DATA.setdefault(user_id, {})
            for category in user_data.get('limits', {}):
                if user_data['limits'][category]['period'] is None:
                    user_data['limits'][category]['period'] = LIMIT_PERIODS[period]
                    user_data['limits'][category]['period_end'] = calculate_period_end(LIMIT_PERIODS[period],
                                                                                       datetime.now())
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–ü–µ—Ä–∏–æ–¥ –¥–ª—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {period}.', reply_markup=markup
            )
        else:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥.'
            )
        return

    if state == UserState.SETTING_GENERAL_LIMIT_PERIOD:
        period = text.lower()
        if period in LIMIT_PERIODS:
            user_data = USER_DATA.setdefault(user_id, {})
            if 'general_limit' in user_data:
                user_data['general_limit']['period'] = LIMIT_PERIODS[period]
                user_data['general_limit']['period_end'] = calculate_period_end(LIMIT_PERIODS[period], datetime.now())
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {period}.', reply_markup=markup
            )
        else:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥.'
            )
        return

    try:
        spend_amount = float(text.replace(',', '.'))
        user_data = USER_DATA.setdefault(user_id, {})
        balance = user_data.get('balance')
        if balance is None:
            await update.message.reply_text(
                '–ë–∞–ª–∞–Ω—Å –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /set_balance.'
            )
            return

        user_data['balance'] = balance - spend_amount

        if 'general_limit' in user_data:
            general_limit_data = user_data['general_limit']
            general_limit_data['spent'] += spend_amount

            if general_limit_data['spent'] > general_limit_data['limit']:
                await update.message.reply_text(
                    f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç {general_limit_data["limit"]:.2f}.\n'
                    f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {general_limit_data["spent"]:.2f}.', reply_markup=markup
                )

        await update.message.reply_text(
            f'–£—á—Ç–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {spend_amount:.2f} üí∏\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - spend_amount:.2f} üí∞', reply_markup=markup
        )
    except ValueError:
        try:
            category, spend_str = text.split()
            spend_amount = float(spend_str.replace(',', '.'))
            user_data = USER_DATA.setdefault(user_id, {})

            balance = user_data.get('balance')
            if balance is None:
                await update.message.reply_text(
                    '–ë–∞–ª–∞–Ω—Å –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /set_balance.'
                )
                return
            user_data['balance'] = balance - spend_amount

            if 'general_limit' in user_data:
                general_limit_data = user_data['general_limit']
                general_limit_data['spent'] += spend_amount
                if general_limit_data['spent'] > general_limit_data['limit']:
                    await update.message.reply_text(
                        f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç {general_limit_data["limit"]:.2f}.\n'
                        f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {general_limit_data["spent"]:.2f}.'
                    )

            limits = user_data.get('limits', {})
            if category in limits:
                limit_data = limits[category]
                limit_data['spent'] += spend_amount

                if limit_data['spent'] > limit_data['limit']:
                    await update.message.reply_text(
                        f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç {limit_data["limit"]:.2f} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".\n'
                        f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {limit_data["spent"]:.2f}.'
                    )

            await update.message.reply_text(
                f'–£—á—Ç–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {spend_amount:.2f} üí∏\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n'
                f'–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - spend_amount:.2f} üí∞',
                reply_markup=markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: "–µ–¥–∞ 100".'
            )


async def stats(update: Update, context):
    user_id = update.effective_user.id
    user_data = USER_DATA.get(user_id, {})
    balance = user_data.get('balance', None)
    limits = user_data.get('limits', {})

    if balance is None or not limits:
        await update.message.reply_text(
            '–î–∞–Ω–Ω—ã–µ –ø–æ –±–∞–ª–∞–Ω—Å—É –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Ö.'
        )
        return

    report = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–µ–º—É –±—é–¥–∂–µ—Ç—É:\n\n"

    report += f"–ë–∞–ª–∞–Ω—Å: {balance} üí∞\n\n"

    if 'general_limit' in user_data:
        general_limit_data = user_data['general_limit']
        general_limit = general_limit_data['limit']
        general_spent = general_limit_data['spent']
        general_period_end = general_limit_data['period_end']
        general_period_end_str = general_period_end.strftime(
            "%Y.%m.%d, %H:%M:%S") if general_period_end else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exceeded_general = "‚úÖ" if general_spent <= general_limit else "‚ö†Ô∏è"

        report += (f"–û–±—â–∏–π –ª–∏–º–∏—Ç:\n"
                   f"–õ–∏–º–∏—Ç: {general_limit:.2f} üíµ\n"
                   f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {general_spent:.2f} {exceeded_general}\n"
                   f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞: {general_period_end_str}\n\n")

    for category, limit_data in limits.items():
        limit = limit_data['limit']
        spent = limit_data['spent']
        period_end = limit_data['period_end']

        period_end_str = period_end.strftime("%Y.%m.%d, %H:%M:%S") if period_end else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exceeded = "‚úÖ" if spent <= limit else "‚ö†Ô∏è"

        report += (f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                   f"–õ–∏–º–∏—Ç: {limit:.2f} üí≥\n"
                   f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} {exceeded}\n"
                   f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {period_end_str}\n\n")

    await update.message.reply_text(report, reply_markup=markup)


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("set_balance", set_balance))
    application.add_handler(CommandHandler("set_limit", set_limit))
    application.add_handler(CommandHandler("set_general_limit", set_general_limit))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("cancel", cancel))

    application.add_handler(
        MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text)
    )

    application.run_polling()


if __name__ == "__main__":
    main()