from data.charts_generator import *
from data.constants_and_etc import *
from data.limits_functions import *

import requests
from datetime import datetime
from telegram import Update


async def start(update: Update, context):
    user = update.effective_user
    USER_STATES[user.id] = UserState.NONE
    await update.message.reply_html(
        f'<b>–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø FinanceBot!</b>\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å–æ–º –∏ –ª–∏–º–∏—Ç–∞–º–∏.',
        reply_markup=markup
    )


async def profile(update: Update, context):
    user = update.effective_user
    data = USER_DATA.get(user.id, {})
    balance = data.get('balance', '–Ω–µ –∑–∞–¥–∞–Ω')
    general_limit = data.get('general_limit', {})
    limits = data.get('limits', {})
    spent = {category: limit_data['spent'] for category, limit_data in limits.items()}

    general_limit_info = f'{general_limit['limit']} (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {general_limit['spent']})' if general_limit else '–Ω–µ –∑–∞–¥–∞–Ω'

    limit_info = '\n'.join(
        [f'{category}: {limit_data['limit']} (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent[category]})' for category, limit_data in
         limits.items()]) if limits else '–Ω–µ –∑–∞–¥–∞–Ω—ã'

    await update.message.reply_html(
        f'{user.mention_html()}\n\n–ë–∞–ª–∞–Ω—Å: {balance}\n\n–û–±—â–∏–π –ª–∏–º–∏—Ç: {general_limit_info}\n\n–õ–∏–º–∏—Ç—ã:\n{limit_info}'
    )


async def stats(update: Update, context):
    user_id = update.effective_user.id
    user_data = USER_DATA.get(user_id, {})

    if not user_data:
        await update.message.reply_text('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        return

    chart_url = None
    if user_data.get('limits'):
        try:
            chart_url = generate_chart_url(user_data)
            if chart_url:
                response = requests.head(chart_url, timeout=5)
                if response.status_code == 200:
                    await update.message.reply_photo(
                        photo=chart_url,
                        caption='üìä <b>–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>',
                        parse_mode='HTML'
                    )
                else:
                    raise Exception(f'–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}')
        except Exception as e:
            print(f'[–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞] {e}')
            await update.message.reply_text(
                '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...'
            )

    report = ['<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>']

    balance = user_data.get('balance', 0)
    report.append(f'\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f} ‚ÇΩ')

    if 'general_limit' in user_data:
        gl = user_data['general_limit']
        status = '‚ö†Ô∏è' if gl['spent'] > gl['limit'] else '‚úÖ'
        period_end = gl.get('period_end', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        if isinstance(period_end, datetime):
            period_end = period_end.strftime('%d.%m.%Y')

        report.append(f'\nüßæ <b>–û–±—â–∏–π –ª–∏–º–∏—Ç:</b> {gl['spent']:.2f}/{gl['limit']:.2f} ‚ÇΩ {status}')
        report.append(f'üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {period_end}')

    if user_data.get('limits'):
        report.append('\nüìå <b>–õ–∏–º–∏—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>')
        for cat, data in user_data['limits'].items():
            status = '‚ö†Ô∏è' if data['spent'] > data['limit'] else '‚úÖ'
            period_end = data.get('period_end', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
            if isinstance(period_end, datetime):
                period_end = period_end.strftime('%d.%m.%Y')

            report.append(f'\n‚Ä¢ <b>{cat.capitalize()}</b>: {data['spent']:.2f}/{data['limit']:.2f} ‚ÇΩ {status}')
            report.append(f'  üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {period_end}')

    await update.message.reply_text(
        '\n'.join(report),
        parse_mode='HTML',
        reply_markup=markup
    )


async def set_balance(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.SETTING_BALANCE
    await update.message.reply_text(
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )


async def add_to_balance(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.ADDING_TO_BALANCE
    await update.message.reply_text(
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )
    print('ok')


async def set_limit(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.SETTING_LIMIT_AMOUNT
    await update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–∏–º–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–µ–¥–∞") –∏ —Å—É–º–º—É –ª–∏–º–∏—Ç–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )


async def set_general_limit(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.SETTING_GENERAL_LIMIT_AMOUNT
    await update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
    )


async def cancel(update: Update, context):
    user_id = update.effective_user.id
    USER_STATES[user_id] = UserState.NONE
    await update.message.reply_text(
        '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=markup
    )


async def handle_text(update: Update, context):
    user_id = update.effective_user.id
    update_limits()
    text = update.message.text.strip()
    state = USER_STATES.get(user_id, UserState.NONE)

    if text == COMMAND_CANCEL:
        await cancel(update, context)
        return

    if state == UserState.SETTING_BALANCE:
        try:
            balance = float(text.replace(',', '.'))
            USER_DATA.setdefault(user_id, {})['balance'] = balance
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {balance:.2f}.', reply_markup=markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
            )
        return

    if state == UserState.ADDING_TO_BALANCE:
        try:
            adding = float(text.replace(',', '.'))
            USER_DATA.setdefault(user_id, {})['balance'] += adding
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {adding}.', reply_markup=markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.'
            )
        return

    if state == UserState.SETTING_LIMIT_AMOUNT:
        try:
            category, limit_str = text.split()
            limit = float(limit_str.replace(',', '.'))
            user_data = USER_DATA.setdefault(user_id, {})
            user_data.setdefault('limits', {})[category] = {'limit': limit, 'spent': 0.0, 'period': None,
                                                            'period_end': None}
            USER_STATES[user_id] = UserState.SETTING_LIMIT_PERIOD
            await update.message.reply_text(
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏–º–∏—Ç–∞:', reply_markup=period_markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É –ª–∏–º–∏—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "–µ–¥–∞ 100".'
            )
        return

    if state == UserState.SETTING_GENERAL_LIMIT_AMOUNT:
        try:
            limit = float(text.replace(',', '.'))
            user_data = USER_DATA.setdefault(user_id, {})
            user_data.setdefault('general_limit', {'limit': limit, 'spent': 0.0, 'period': None, 'period_end': None})
            USER_STATES[user_id] = UserState.SETTING_GENERAL_LIMIT_PERIOD
            await update.message.reply_text(
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞:', reply_markup=period_markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "100".'
            )
        return

    if state == UserState.SETTING_LIMIT_PERIOD:
        period = text.lower()
        if period in LIMIT_PERIODS:
            user_data = USER_DATA.setdefault(user_id, {})
            for category in user_data.get('limits', {}):
                if user_data['limits'][category]['period'] is None:
                    user_data['limits'][category]['period'] = LIMIT_PERIODS[period]
                    user_data['limits'][category]['period_end'] = calculate_period_end(LIMIT_PERIODS[period],
                                                                                       datetime.now())
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–ü–µ—Ä–∏–æ–¥ –¥–ª—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {period}.', reply_markup=markup
            )
        else:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥.'
            )
        return

    if state == UserState.SETTING_GENERAL_LIMIT_PERIOD:
        period = text.lower()
        if period in LIMIT_PERIODS:
            user_data = USER_DATA.setdefault(user_id, {})
            if 'general_limit' in user_data:
                user_data['general_limit']['period'] = LIMIT_PERIODS[period]
                user_data['general_limit']['period_end'] = calculate_period_end(LIMIT_PERIODS[period], datetime.now())
            USER_STATES[user_id] = UserState.NONE
            await update.message.reply_text(
                f'–ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {period}.', reply_markup=markup
            )
        else:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥.'
            )
        return

    try:
        spend_amount = float(text.replace(',', '.'))
        user_data = USER_DATA.setdefault(user_id, {})
        balance = user_data.get('balance')
        if balance is None:
            await update.message.reply_text(
                '–ë–∞–ª–∞–Ω—Å –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /set_balance.'
            )
            return

        user_data['balance'] = balance - spend_amount

        if 'general_limit' in user_data:
            general_limit_data = user_data['general_limit']
            general_limit_data['spent'] += spend_amount

            if general_limit_data['spent'] > general_limit_data['limit']:
                await update.message.reply_text(
                    f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç {general_limit_data['limit']:.2f}.\n'
                    f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {general_limit_data['spent']:.2f}.', reply_markup=markup
                )

        if balance - spend_amount < 0:
            await update.message.reply_text(
                f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –Ω—É–ª—è.'
            )

        await update.message.reply_text(
            f'–£—á—Ç–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {spend_amount:.2f} üí∏\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - spend_amount:.2f} üí∞', reply_markup=markup
        )
    except ValueError:
        try:
            category, spend_str = text.split()
            spend_amount = float(spend_str.replace(',', '.'))
            user_data = USER_DATA.setdefault(user_id, {})
            balance = user_data.get('balance')

            if balance is None:
                await update.message.reply_text(
                    '–ë–∞–ª–∞–Ω—Å –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /set_balance.'
                )
                return

            if 'limits' not in user_data or category not in user_data['limits']:
                await update.message.reply_text(
                    f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /set_limit.',
                    reply_markup=markup
                )
                return

            user_data['balance'] = balance - spend_amount

            if 'general_limit' in user_data:
                general_limit_data = user_data['general_limit']
                general_limit_data['spent'] += spend_amount
                if general_limit_data['spent'] > general_limit_data['limit']:
                    await update.message.reply_text(
                        f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç {general_limit_data['limit']:.2f}.\n'
                        f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {general_limit_data['spent']:.2f}.'
                    )

            limit_data = user_data['limits'][category]
            limit_data['spent'] += spend_amount

            if limit_data['spent'] > limit_data['limit']:
                await update.message.reply_text(
                    f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç {limit_data['limit']:.2f} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".\n'
                    f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {limit_data['spent']:.2f}.'
                )

            await update.message.reply_text(
                f'–£—á—Ç–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {spend_amount:.2f} üí∏\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n'
                f'–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - spend_amount:.2f} üí∞',
                reply_markup=markup
            )
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: "–µ–¥–∞ 100".',
                reply_markup=markup
            )
